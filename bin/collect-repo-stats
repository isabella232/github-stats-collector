#!/usr/bin/env node
'use strict';
const repo = require("../lib/repo");
const program = require('commander');
const fs = require('fs');
const readline = require('readline');
const colors = require('colors/safe');
const d3 = require("d3-queue");

program
  .option('-i, --input [file]', 'JSON file containing each repo to fetch')
  .option('-o, --output [file]', 'JSON file containing the statistics for each repo')
  .option('--concurrency [num]', 'How many requests to send in parallel')
  .parse(process.argv);

if(!process.env.GITHUB_ACCESS_TOKEN) {
  console.error('GITHUB_ACCESS_TOKEN not set to a valid GitHub access token')
  program.outputHelp();
}

if (program.input && program.output) {
  const lineReader = readline.createInterface({
    input: fs.createReadStream(program.input)
  });
  let reposCount = 0;
  let completedCount = 0;

  function getStats(r, cb) {
    repo.getRepoStats(r, (err, stats) => {
      if (err) {
        console.error(colors.red(`${r.full_name} failed ${err}`));
        if(err.stack) console.error(colors.red(err.stack));
      } else {
        fs.appendFile(program.output, JSON.stringify(stats) + '\n', (err) => {
          if (err) throw err;
          console.log(colors.green(`${stats.owner}/${stats.name} saved stats`));
          completedCount += 1;
          console.log(colors.blue(`Completed ${completedCount}/${reposCount} repos`));
        });
      }
      cb(null, stats);
    });
  }

  const q = d3.queue(parseInt(program.concurrency || 1));
  lineReader.on('line', function (line) {
    const repo = JSON.parse(line);
    reposCount += 1;
    q.defer(getStats, repo);
  });

  lineReader.on('close', () => {
    console.log(colors.blue('Working through', reposCount, 'repos'));
    q.awaitAll((err, stats) => {
      if (err) {
        console.error('Could not finish collecting stats');
        throw err;
      }
      console.log('Finished collecting stats for', stats.length, 'repos');
    });
  });
} else {
  program.outputHelp();
}
